
extended_euclidean(_, _): Int^2 => Int^3
  = ee_recursion((1, 0), (0, 1), _)

ee_recursion(_, _, _): Int^2 x Int^2 x Int^2 => Int^3
  = (a_coeffs, b_coeffs, (x, cases))
    0 => (x, a_coeffs.1st, b_coeffs.1st)
    y =>
      ee_recursion(next(a_coeffs), next(b_coeffs), (y, (x)mod(y)))
      where
      next(_): Int^2 => Int^2
        = _.change{1st = 2nd, 2nd = 1st - (x)div(y) * 2nd}

read_two_ints: (Int^2)FromIO 
  = print_line("Please give me 2 ints"); 
    get_line ;> split(_)to_words o> cases
      [x, y] => (from_string(x), from_string(y)) -> (_)from_io
      ... => throw_err("You didn't give me 2 ints")
    
main: IO
  = read_two_ints ;> (i1, i2) =>
    print_line("The result is " + extended_euclidean(i1, i2))

