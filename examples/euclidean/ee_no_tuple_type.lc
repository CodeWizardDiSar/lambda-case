
extended_euclidean: (Int, Int) -> (Int, Int, Int)
  = ((1, 0), (0, 1)) ==> ee_recursion

ee_recursion: ((Int, Int), (Int, Int), Int, Int) -> (Int, Int, Int)
  = (a_coeffs, b_coeffs, x) -> cases
    0 -> (x, a_coeffs==>get_first, b_coeffs==>get_first)
    y ->
      let
      next: (Int, Int) -> (Int, Int)
        = use_fields -> (pair_second, pair_first - x==>div<==y * pair_second)
      output
      (next<==a_coeffs, next<==b_coeffs, y, x==>mod<==y)==>ee_recursion
