
initial_a_coeffs, initial_b_coeffs: ( Int, Int ), ( Int, Int )
  = ( 1, 0 ), ( 0, 1 )

extended_euclidean: Int -> Int -> ( Int, Int, Int )
  = extended_euclidean_help<--initial_a_coeffs<--initial_b_coeffs

extended_euclidean_help: ( Int, Int ) -> ( Int, Int ) -> Int -> Int -> ( Int, Int, Int )
  = a_coeffs -> b_coeffs -> x -> case
    0 -> ( x, a_coeffs-->get_first, b_coeffs-->get_first )
    y -> 
      intermediates
      compute_new: ( Int, Int ) -> ( Int, Int )
        = ( prev_prev, prev ) -> ( prev, prev_prev - x-->div<--y * prev )
      new_a_coeffs, new_b_coeffs: ( Int, Int ), ( Int, Int )
        = compute_new<--a_coeffs, compute_new<--b_coeffs
      output
      extended_euclidean_help<--new_a_coeffs<--new_b_coeffs<--y<--(x-->mod<--y)
