
initial_previous_coeffs_of_a, initial_previous_coeffs_of_b: ( Int, Int ), ( Int, Int )
  = ( 1, 0 ), ( 0, 1 )

extended_euclidean: Int -> Int -> ( Int, Int, Int )
  = extended_euclidean_help<--initial_previous_coeffs_of_a<--initial_previous_coeffs_of_b

extended_euclidean_help: ( Int, Int ) -> ( Int, Int ) -> Int -> Int -> ( Int, Int, Int )
  = previous_coeffs_of_a -> previous_coeffs_of_b -> x -> case
    0 -> ( x, pcoa-->get_first, pcob-->get_first )
    y -> 
      intermediates
      compute_new: ( Int, Int ) -> ( Int, Int )
        = old_previous_coefficients ->
          intermediates
          previous_previous, previous, current: Int, Int, Int 
            = opc-->get_first, opc-->get_second
              , previous_previous - x-->div<--y * previous
          output
          ( previous, current )
      new_previous_coeffs_of_a, new_previous_coeffs_of_b: ( Int, Int ), ( Int, Int )
        = pcoa-->compute_new, pcob-->compute_new
      output
      extended_euclidean_help<--npcoa<--npcob<--y<--(x-->mod<--y)
