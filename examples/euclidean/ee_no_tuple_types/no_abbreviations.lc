initial_previous_coeffs_of_a, initial_previous_coeffs_of_b: (Int, Int), (Int, Int)
  = (1, 0), (0, 1)

extended_euclidean: Int, Int :> (Int, Int, Int)
  = initial_previous_coeffs_of_a, initial_previous_coeffs_of_b :-> extended_euclidean_help

extended_euclidean_help: (Int, Int), (Int, Int), Int, Int :> (Int, Int, Int)
  = previous_coeffs_of_a, previous_coeffs_of_b, x :> case
    0 -> (x, previous_coeffs_of_a-->get_first, previous_coeffs_of_b-->get_first)
    y -> 
      intermediates
      compute_new: (Int, Int) -> (Int, Int)
        = (previous_previous, previous) ->
          (previous, previous_previous - x-->div<--y * previous)
      output
      pcoa-->compute_new, pcob-->compute_new, y, x-->mod<--y :-> extended_euclidean_help
