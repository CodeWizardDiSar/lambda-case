
initial_previous_coeffs_of_a: ( Int, Int )
  = ( 1, 0 )

initial_previous_coeffs_of_b: ( Int, Int )
  = ( 0, 1 )

extended_euclidean: Int -> Int -> ( Int, Int, Int )
  = extended_euclidean_help<--initial_previous_coeffs_of_a<--initial_previous_coeffs_of_b

extended_euclidean_help: ( Int, Int ) -> ( Int, Int ) -> Int -> Int -> ( Int, Int, Int )
  = previous_coeffs_of_a -> previous_coeffs_of_b -> x -> case
    0 -> ( x, previous_coeffs_of_a-->get_first, previous_coeffs_of_b-->get_first )
    y -> 
      intermediates
      compute_new: ( Int, Int ) -> ( Int, Int )
        = match_tuple ->
          intermediates
          previous_previous: Int
            = first
          previous: Int
            = second
          current: Int
            = previous_previous - x-->div<--y * previous
          output
          ( previous, current )
      output
      extended_euclidean_help
        <--(compute_new-->previous_coeffs_of_a)<--(compute_new-->previous_coeffs_of_b)
        <--y<--(x-->mod<--y)
