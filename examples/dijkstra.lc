type_nickname Graph = ListOf(Node)s

tuple_type Node
value (n_name, neighbors) : Char x ListOf(Neighbor)s

type_nickname Dist = Int

tuple_type NameAndDist
value (name, dist) : Char x Dist

type_nickname Neighbor = NameAndDist

tuple_type State
value (dns, rns) : ListOf(DoneNode)s x ListOf(ReachableNode)s

or_type InRNsPossibilities
values in_rns:Dist x ListOf(ReachableNode)s | not_in_rns

type_nickname DoneNode = NameAndDist

type_nickname ReachableNode = NameAndDist

type_nickname (T1)FStateMan = (T1)FState(State)Man

type_nickname StateMan = State(State)Man

set_rns(_) : ListOf(ReachableNode)s => StateMan
  = rns => modify_state_with(s => (s.dns, rns))

dijkstra(_, _) : Char x Graph => ListOf(DoneNode)s
  = (source_name, g) => result_of(get_result)on_init_state(is)
    where
    is : State
      = ([], [(source_name, 0)])

    get_result : (ListOf(DoneNode)s)FStateMan
      = get_state ;> state =>
        state.rns -> cases
          [] => wrap(state.dns)
          [rn1, rns = ...] =>
            set_state((state.dns + rn1, rns)) ;
            add_new_rns(rn1, get_neighbors(rn1)) ;
            get_result

    get_neighbors(_) : DoneNode => ListOf(Neighbor)s
      = dn => get_neighbors_from_nodes(g)
        where
        get_neighbors_from_nodes(_) : ListOf(Node)s => ListOf(Neighbor)s
          = cases
            [] => throw_err("Should be impossible: I'm not in the nodes!")
            [n, ns = ...] =>
              (dn.name == n.n_name) -> cases
                true => n.neighbors
                false => get_neighbors_from_nodes(ns)

update_neighbor(_)of(_) : Neighbor x DoneNode => StateMan
  = (ne, dn) =>
    check_if_ne_in_rns ;> cases
      in_rns:stuff => add_ne_to_rns_from_dn_if_better(stuff)
      not_in_rns =>
        check_if_ne_in_dns ;> cases
          true => do_nothing
          false => add_ne_to_rns_from_dn
    where
    check_if_ne_in_rns : (InRNsPossibilities)FStateMan
      = get_state ;> _.rns o> check_ne_in_rns_rec([], _)
        where
        check_ne_in_rns_rec(_, _)
          : ListOf(ReachableNode)s^2 => (InRNsPossibilities)FStateMan
          = (checked, cases)
            [] => wrap(not_in_rns)
            [rn1, rns = ...] =>
              (ne.name == rn1.name) -> cases
                true => in_rns:(rn1.dist, checked + rns) -> wrap(_)
                false => check_ne_in_rns_rec(checked + rn1, rns)

    add_ne_to_rns_from_dn_if_better(_)
      : Dist x ListOf(ReachableNode)s => StateMan
      = (d, other_rns) =>
        (new_d < d) -> cases
          true => set_rns(_) <- add((ne.name, new_d))to_rns(other_rns)
          false => do_nothing
        where
        new_d : Dist
          = dn.dist + ne.dist

    check_if_ne_in_dns : (Bool)FStateMan
      = get_state ;> _.dns o> check_ne_name_in(_)
        where
        check_ne_name_in(_)
          : ListOf(DoneNode)s => (Bool)FStateMan
          = cases
            [] => wrap(false)
            [dn, dns = ... ] =>
              (ne.name == dn.name) -> cases
                true => wrap(true)
                false => check_ne_name_in(dns)

    add_ne_to_rns_from_dn : StateMan
      = get_state ;> _.rns o> add((ne.name, dn.dist + ne.dist))to_rns(_) o>
        set_rns(_)

add_new_rns(_, _) : DoneNode x ListOf(Neighbor)s => StateMan
  = (dn, cases)
    [] => do_nothing
    [ne1, nes = ...] => update_neighbor(ne1)of(dn) ; add_new_rns(dn, nes)

add(_)to_rns(_)
  : ReachableNode x ListOf(ReachableNode)s => ListOf(ReachableNode)s
  = (rn, cases)
    [] => [rn]
    [rn1, rns = ...] =>
      (rn.dist < rn1.dist) -> cases
        true => rn + (rn1 + rns)
        false => rn1 + add(rn)to_rns(rns)

test_graph : Graph
  = [ ('a', [('b', 2), ('d', 6)])
    , ('b', [('a', 2), ('c', 3)])
    , ('c', [('b', 3), ('d', 5), ('e', 1)])
    , ('d', [('a', 6), ('c', 5), ('e', 4)])
    , ('e', [('c', 1), ('d', 4), ('f', 3)])
    , ('f', [('c', 7), ('e', 3)])
    ]

type_theorem (NameAndDist)Has_Str_Rep
proof
  (_)to_string = nam => "(name = " + nam.name + ", dist = " + nam.dist + ")"

main : IO
  = dijkstra('a', test_graph) -> print

