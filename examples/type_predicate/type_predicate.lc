tuple_type A, B :-> Pair
value (pair_first:A, pair_second:B)

tuple_type A, B, C :-> Triple
value (triple_first:A, triple_second:B, triple_third:C)

# is first of predicate

type_predicate A-->Is_First_Of<--B
values
  get_first: B -> A


type_proposition A-->Is_First_Of<--(PairOf <-: A, B)
proof
  get_first = get_pair_first

type_proposition A-->Is_First_Of<--(TripleOf <-: A, B, C)
proof
  get_first = get_triple_first

a: Int
  = (1, "one")-->get_first

b: Int
  = (1, "one", '1')-->get_first

main: IO Empty
(a == b) --> case
  True -> print "Turns out they are the same!"
  False -> print "Nope!"
