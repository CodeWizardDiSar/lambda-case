tuple_type HeadAndTail<--A 
value (head:A, tail:ListOf(A)s)

or_type ListOf(A)s
values 
  NonEmpty<--(HeadAndTail<--A) | Empty

apply(f)to_each: (A -> B) -> ListOf(A)s -> ListOf(B)s
  = case 
    NonEmpty -> (get_head-->f, get_tail-->apply(f)to_each)-->NonEmpty
    Empty -> Empty

type_predicate T-->IsAFunctor
functions
  apply_internally: (A -> B) -> T<--A -> T<--B

type_proposition ListOf()s-->IsAFunctor
proof
  apply_internally = apply()to_each

IO Empty
is_odd, [ 1, 2, 3, 4 ] :-> apply_internally --> print
