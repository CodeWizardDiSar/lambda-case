
or_type Possibly(T1)
values the_value:T1 | no_value

or_type Comparison
values lesser | equal | greater

compare(_)with(_) : Int x Int => Comparison
  = (a, b) =>
    (a < b) -> cases
      true => lesser
      false =>
        (a == b) -> cases
          true => equal
          false => greater

split(_)at(_) : ListOf(T1)s x Int => Possibly(T1 x ListOf(T1)s^2)
  = (cases, cases)
    ([], *) => no_value
    ([head, tail = ...], 0) => the_value:(head, ([], tail))
    ([head, tail = ...], n) =>
      split(tail)at(n - 1) -> cases
        no_value => no_value
        the_value:(item, (left_l, right_l)) =>
          the_value:(item, (head + left_l, right_l))

bin_search(_, _) : ListOf(Int)s x Int => Possibly(Int)
  = (list, target) =>
    split(list)at(middle_ind) -> cases
      no_value => no_value
      the_value:(middle, (left_l, right_l)) =>
        compare(middle)with(target) -> cases
          lesser =>
            bin_search(right_l, target) -> cases
              no_value => no_value
              the_value:i => the_value:(middle_ind + 1 + i)
          equal => the_value:middle_ind
          greater => bin_search(left_l, target)
    where
    middle_ind : Int
      = ((list)length - 1)div(2)

list : ListOf(Int)s
  = [2, 4, 6, 8]

result_msg(_) : Possibly(Int) => IO
  = cases
    no_value => print_line("Target Not Found")
    the_value:ind => print_line("Found! The index is: " + ind)

try(_) : Int => IO
  = i => print_line("Trying " + (i)to_string) ; result_msg(bin_search(list, i))

try_list(_) : ListOf(Int)s => IO
  = cases
    [] => do_nothing
    [i, is = ...] => try(i) ; try_list(is)

main : IO
  = try_list([0,1,2,3,4,5,6,7,8])
