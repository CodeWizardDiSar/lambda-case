
- problem with func comp ops and "o" > or < ? grammar ambiguity?

--------------------------------------------------------------later

- group <type-id> and <type-var> everywhere as <type-id-or-var> ?

- proof => implementation in ttheo

- value => value_needed in tprop

- is it possible to have param-t-var in type-app(-sub) ?
 
- good page changes in description pdf

- spaces
  - ?
    - change: add optional
    - field change: make optional
    - params arrow: make optional
    - case arrow: make optional
    - end case arrow: make optional
    - value def: make optional
      - after : 
      - after = 
    - grouped value defs: make optional
      - after :
      - after =

    - func type: make optional
    - power type: add optional around '^' 
    - conditio: make optional
    - or type def: make optional around '|'
    - type nickname: make optional
    - atom prop def: make optional around ':'
    - type theorem: make optional

- turn all args in paren func app into a tuple
  - try to typecheck with the whole tuple as the first arg
  - if it fails typecheck with the first field of the tuple as the first arg

- better parser errors (with less try)?
  - it fails on the last it tried
    - how to mitigate that?

- group type nicknames with "all"

- printing tuples (json style or similar)

- comments
  - line: #
    - can also close in the same line with second #
  - multiline: ## and close with second ##

- define arrays with power?
  - maybe good for one dimension +
    better with square brackets and commas (or x?) for multidimensional

- add element index mechanism?
  - like arrays in most languages with a[i]?
  - op like in haskell?
  - something with .change? (i, j) = ...?

- isolate hs gen (am I even gonna bother to look at the old code?)

- fix md files in github
