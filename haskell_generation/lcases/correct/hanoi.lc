
or_type Rod
values left | middle | right

tuple_type Move
value (from: Rod, to: Rod)

tuple_type NonEmptyMoves
value (move1: Move, other_moves: Moves)

or_type Moves
values moves<==(value: NonEmptyMoves) | no_moves

hanoi: (Rod, Rod, Rod, Int) -> Moves
  = (source, target, auxiliary) -> cases
    1 -> moves<==((source, target), no_moves)
    rings ->
      let
      moves1: Moves
        = hanoi(source, auxiliary, target, rings - 1)
      moves2: Moves
        = hanoi(auxiliary, target, source, rings - 1)
      in
      add_moves(moves1, moves<==((source, target), moves2))

add_moves: (Moves, Moves) -> Moves
  = cases
      moves -> moves2 -> moves<==(move1, add_moves(other_moves, moves2))
      no_moves -> moves2 -> moves2

res: Moves
  = hanoi(left, right, middle, 3)
