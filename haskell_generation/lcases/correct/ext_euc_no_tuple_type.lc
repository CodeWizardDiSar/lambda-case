
extended_euclidean: (Int, Int) -> Int x Int x Int
  = (1, 0)==>ee_recursion<==(0, 1)

ee_recursion: (Int x Int, Int x Int, Int, Int) -> Int x Int x Int
  = (a_coeffs, b_coeffs, x) -> cases
    0 -> (x, a_coeffs==>get_1st, b_coeffs==>get_1st)
    y ->
      let
      next: Int x Int -> Int x Int 
        = use_fields -> (second, first - x==>div<==y * second)
      in
      (next<==a_coeffs, next<==b_coeffs, y, x==>mod<==y)==>ee_recursion

res: Int x Int x Int
  = 19728602432==>extended_euclidean<==437829011231234
