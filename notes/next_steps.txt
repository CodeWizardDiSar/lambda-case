type_inference
- one by one 
- probably can use some type checking along the way for speed

fix 
- parenthesis in one argument applications: type_inference
- case/use_fields at the end of one argument applications
- stack of types in value map for multiple-level definitions
- let-output -> where (problem with where values and values outside of function)
- type_map_lookup

or_type
- generator
  - "is_..." autogenerated functions
    - already put in map
    - need to also generate the definition

literals
- reals
- strings

cases
- check for each specific case if case of or_type or literal
- "value" default name for tuple_type value of each case

use_fields
- "value" default name for the whole tuple_type value

tuple_type
- "update_field" autogenerated functions

regular parenthesis function application
- parser for already existing type?

operators 
- type class maybe? 

parentheses in the middle 
- function definition
- type definition
- function application

better error 
- transform the state with EitherT (or ExceptT)
- find error calls that are errors for the user and modify them appropriately
- add line/column numbers

wrong examples for testing error messages
