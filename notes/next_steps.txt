type_inference:
- cases:
  - type infer first
  - type check the rest with the same type
  - if type check correct => case has the same type

type abstractions:
- ==>, <==, *==>, paren at the end (mathematical notation)

fix:
- cases/use_fields at the end of one argument applications:
  optionMaybe!
- stack of types in value map for multiple-level definitions
- let-output -> where 
  - problem with values in and outside of function:
    add intentation levels in parsing

cases:
- "value" default name for tuple_type value of each case
- add "..." case functionality:
  - create new type LOVNOrDefault
  - LOVN LiterOrValueName | Default
  - parse "..." to Default:
    optionMaybe?

use_fields:
- "value" default name for the whole tuple_type value

literals:
- reals + strings

autgenerated functions:
- update_field: TupleType, FieldType *-> TupleType
  - put in map + generate definition
- is_case: OrType -> Bool
  - put in map + generate definition

regular parenthesis function application:
- parser for already existing type?

operators:
- type class maybe? 

parentheses in the middle:
- function definition
- function application

better error:
- transform the state with EitherT (or ExceptT)
- find error calls that are errors for the user and modify them appropriately
- add line/column numbers

testing:
- wrong examples 
