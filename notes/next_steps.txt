type_inference
- start by creating a seperate function in each type 
 
type abstractions
- ==>, <==, *=>, paren at the end (classic notation)

fix 
- parenthesis in one argument applications: type_inference
- case/use_fields at the end of one argument applications
- stack of types in value map for multiple-level definitions
- let-output -> where 
  - problem with values in and outside of function: add intentation levels

cases
- check for each specific case if case of or_type or literal
- "value" default name for tuple_type value of each case

use_fields
- "value" default name for the whole tuple_type value

literals
- reals + strings

autgenerated functions
- update_field: TupleType, FieldType *> TupleType
  - put in map + generate definition
- is_case: OrType -> Bool
  - put in map + generate definition

regular parenthesis function application
- parser for already existing type?

operators 
- type class maybe? 

parentheses in the middle 
- function definition
- type definition
- function application

better error 
- transform the state with EitherT (or ExceptT)
- find error calls that are errors for the user and modify them appropriately
- add line/column numbers

wrong examples for testing error messages
