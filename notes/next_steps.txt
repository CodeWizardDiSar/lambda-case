math function application:
- parser for already existing type

type abstractions:
- ==>, <==, *==>, paren at the end (mathematical notation)

scope:
- stack of types in value map for multiple-level definitions
- remove head when leaving scope

fix:
- make tuple lambda operator value
- many abstractions in tuple
- cases/use_fields at the end of one argument applications:
  optionMaybe or change the last type??
- let-output -> where:
  - problem with values in and outside of function
  - add intentation levels in parsing

cases:
- "value" default name for tuple_type value of each case: use "value@"
- add "..." case functionality:
  - create new type LOVNOrDefault
  - LOVN LiterOrValueName | Default
  - parse "..." to Default:
    optionMaybe?

literals:
- reals + strings

autogenerated functions:
- update_field: TupleType, FieldType *-> TupleType
  put in map + generate definition
- is_case: OrType -> Bool
  put in map + generate definition

operators:
- o>, <o 
- type class maybe? 

parentheses in the middle:
- function definition
- function application

better error:
- transform the state with EitherT (or ExceptT)
- find error calls that are errors for the user and modify them appropriately
- add line/column numbers

type predicates
type theorems
my default show
comments
undefined keyword

testing:
- wrong examples 
